// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/01/2024 20:48:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    milestone1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module milestone1_vlg_sample_tst(
	clk_i,
	dime_i,
	nickel_i,
	quarter_i,
	sampler_tx
);
input  clk_i;
input  dime_i;
input  nickel_i;
input  quarter_i;
output sampler_tx;

reg sample;
time current_time;
always @(clk_i or dime_i or nickel_i or quarter_i)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module milestone1_vlg_check_tst (
	change_o,
	soda_o,
	sampler_rx
);
input [2:0] change_o;
input  soda_o;
input sampler_rx;

reg [2:0] change_o_expected;
reg  soda_o_expected;

reg [2:0] change_o_prev;
reg  soda_o_prev;

reg [2:0] change_o_expected_prev;
reg  soda_o_expected_prev;

reg [2:0] last_change_o_exp;
reg  last_soda_o_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	change_o_prev = change_o;
	soda_o_prev = soda_o;
end

// update expected /o prevs

always @(trigger)
begin
	change_o_expected_prev = change_o_expected;
	soda_o_expected_prev = soda_o_expected;
end


// expected change_o[ 2 ]
initial
begin
	change_o_expected[2] = 1'bX;
end 
// expected change_o[ 1 ]
initial
begin
	change_o_expected[1] = 1'bX;
end 
// expected change_o[ 0 ]
initial
begin
	change_o_expected[0] = 1'bX;
end 

// expected soda_o
initial
begin
	soda_o_expected = 1'bX;
end 
// generate trigger
always @(change_o_expected or change_o or soda_o_expected or soda_o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected change_o = %b | expected soda_o = %b | ",change_o_expected_prev,soda_o_expected_prev);
	$display("| real change_o = %b | real soda_o = %b | ",change_o_prev,soda_o_prev);
`endif
	if (
		( change_o_expected_prev[0] !== 1'bx ) && ( change_o_prev[0] !== change_o_expected_prev[0] )
		&& ((change_o_expected_prev[0] !== last_change_o_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_o_expected_prev);
		$display ("     Real value = %b", change_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_change_o_exp[0] = change_o_expected_prev[0];
	end
	if (
		( change_o_expected_prev[1] !== 1'bx ) && ( change_o_prev[1] !== change_o_expected_prev[1] )
		&& ((change_o_expected_prev[1] !== last_change_o_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_o_expected_prev);
		$display ("     Real value = %b", change_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_change_o_exp[1] = change_o_expected_prev[1];
	end
	if (
		( change_o_expected_prev[2] !== 1'bx ) && ( change_o_prev[2] !== change_o_expected_prev[2] )
		&& ((change_o_expected_prev[2] !== last_change_o_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_o_expected_prev);
		$display ("     Real value = %b", change_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_change_o_exp[2] = change_o_expected_prev[2];
	end
	if (
		( soda_o_expected_prev !== 1'bx ) && ( soda_o_prev !== soda_o_expected_prev )
		&& ((soda_o_expected_prev !== last_soda_o_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port soda_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", soda_o_expected_prev);
		$display ("     Real value = %b", soda_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_soda_o_exp = soda_o_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module milestone1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_i;
reg dime_i;
reg nickel_i;
reg quarter_i;
// wires                                               
wire [2:0] change_o;
wire soda_o;

wire sampler;                             

// assign statements (if any)                          
milestone1 i1 (
// port map - connection between master ports and signals/registers   
	.change_o(change_o),
	.clk_i(clk_i),
	.dime_i(dime_i),
	.nickel_i(nickel_i),
	.quarter_i(quarter_i),
	.soda_o(soda_o)
);

// clk_i
initial
begin
	clk_i = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk_i = 1'b0;
		clk_i = #10000 1'b1;
		# 10000;
	end
	clk_i = 1'b0;
end 

// nickel_i
initial
begin
	nickel_i = 1'b0;
	nickel_i = #20000 1'b1;
	nickel_i = #40000 1'b0;
	nickel_i = #100000 1'b1;
	nickel_i = #20000 1'b0;
end 

// dime_i
initial
begin
	dime_i = 1'b0;
	dime_i = #80000 1'b1;
	dime_i = #20000 1'b0;
	dime_i = #80000 1'b1;
	dime_i = #20000 1'b0;
end 

// quarter_i
initial
begin
	quarter_i = 1'b0;
	quarter_i = #60000 1'b1;
	quarter_i = #20000 1'b0;
	quarter_i = #40000 1'b1;
	quarter_i = #20000 1'b0;
	quarter_i = #60000 1'b1;
	quarter_i = #20000 1'b0;
end 

milestone1_vlg_sample_tst tb_sample (
	.clk_i(clk_i),
	.dime_i(dime_i),
	.nickel_i(nickel_i),
	.quarter_i(quarter_i),
	.sampler_tx(sampler)
);

milestone1_vlg_check_tst tb_out(
	.change_o(change_o),
	.soda_o(soda_o),
	.sampler_rx(sampler)
);
endmodule

